--> Отношение один к многим: режиссёр и фильмы <--

CREATE TABLE Director
(
    director_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(100) NOT NULL UNIQUE,
    age         INT CHECK (age > 10)
);

CREATE TABLE Movie
(
    movie_id           INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_id        INT          NOT NULL REFERENCES Director (director_id),
    name               VARCHAR(200) NOT NULL,
    year_of_production INT CHECK (year_of_production > 1900)
);

INSERT INTO Director (name, age)
VALUES ('Quentin Tarantino', 57),
       ('Martin Scorsese', 78),
       ('Guy Ritchie', 52),
       ('Woody Allen', 85),
       ('Davin Lynch', 74),
       ('Christopher Nolan', 50);

INSERT INTO Movie (director_id, name, year_of_production)
VALUES (1, 'Reservoir Dogs', 1992),
       (1, 'Pulp Fiction', 1994),
       (1, 'The hateful Eight', 2015),
       (1, 'Once Upon a Time in Hollywood', 2019),
       (2, 'Taxi Driver', 1976),
       (2, 'Goodfellas', 1990),
       (2, 'The Wolf of Wall Street', 2013),
       (3, 'Lock, Stock and Two Smoking Barrels', 1998),
       (3, 'Snatch', 2000),
       (4, 'Midnight in Paris', 2011),
       (6, 'Inception', 2010);

-- Количество фильмов у заданного автора --
SELECT dir.name, count(Mov.director_id)
FROM Director dir
         JOIN Movie Mov ON dir.director_id = Mov.director_id
WHERE dir.name = 'Quentin Tarantino'
GROUP BY dir.director_id;


--> Отношение один к одному: гражданин и паспорт <--

CREATE TABLE Citizen
(
    citizen_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       VARCHAR(100) NOT NULL,
    age        INT CHECK (age > 0)
);

CREATE TABLE Passport
(
    citizen_id      INT PRIMARY KEY REFERENCES Citizen (citizen_id),
    passport_number INT
);

INSERT INTO Citizen (name, age)
VALUES ('Bob', 12),
       ('Tom', 24),
       ('Katy', 39),
       ('Alice', 45);

INSERT INTO Passport (citizen_id, passport_number)
VALUES (1, 12345),
       (2, 75124),
       (3, 91245),
       (4, 19259);

--> Отношение многие ко многим: актёр и фильмы <--

CREATE TABLE Actor
(
    actor_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     VARCHAR(100) NOT NULL UNIQUE,
    age      INT CHECK (age > 0)
);

INSERT INTO Actor (name, age)
VALUES ('Harvey Keitel', 81),
       ('Robert De Niro', 77),
       ('Leonardo DiCaprio', 46),
       ('Jason Statham', 53),
       ('Joe Pesci', 77),
       ('Samuel L. Jackson', 72);

-- Создаём связующую таблицу --
CREATE TABLE Actor_Movie
(
    actor_id INT REFERENCES Actor (actor_id),
    movie_id INT REFERENCES Movie (movie_id),
    PRIMARY KEY (actor_id, movie_id)
);

INSERT INTO Actor_Movie (actor_id, movie_id)
VALUES (1, 1),
       (1, 2),
       (2, 5),
       (2, 6),
       (3, 4),
       (3, 7),
       (3, 11),
       (4, 8),
       (4, 9),
       (5, 6),
       (6, 2),
       (6, 3);

SELECT Actor.name, M.name
FROM Actor
         JOIN Actor_Movie AM ON Actor.actor_id = AM.actor_id
         JOIN Movie M ON M.movie_id = AM.movie_id
WHERE Actor.name = 'Harvey Keitel';

SELECT Actor.name, count(Actor.actor_id)
FROM Actor
         JOIN Actor_Movie AM ON Actor.actor_id = AM.actor_id
         JOIN Movie M ON M.movie_id = AM.movie_id
WHERE Actor.name = 'Harvey Keitel'
GROUP BY Actor.name;